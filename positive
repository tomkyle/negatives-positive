#!/usr/bin/env bash

# *******************************************************
#
#  positive
#
#  Author: Carsten Witt <tomkyle@posteo.de>
#  Homepage: <https://github.com/tomkyle/negatives-positive>
#
#  ImageMagick:
#  http://www.imagemagick.org/script/mogrify.php
#  http://www.imagemagick.org/script/convert.php
#
#  GNU Parallel:
#  https://www.gnu.org/software/parallel/
#
# *******************************************************


# ======================================
# Runtime Environment
# ======================================

set -o errexit  # Exit if any statement returns a non-true return value.
set -o nounset  # Exit if trying to use an uninitialised variable
set -o pipefail # Pipelines produce failure return code if any command errors.
# set -o xtrace



# --------------------------------------
# Global Requirements
# --------------------------------------
function require  {
    command -v "${1}" >/dev/null 2>&1 || e_error "$(printf "Program '%s' required, but it's not installed" "${1}")"
}

# System commands
require brew
require dirname
require basename

# --------------------------------------
# Global settings
# --------------------------------------

# Default Exit or SIGINT(2) handler
function trapCleanupTempDir() {
    tmp_dir_to_clean="${WORK_TMPDIR:-}"
    if [ -d "${tmp_dir_to_clean}" ]; then
        printf "Remove temporary directory %s ... " "${tmp_dir_to_clean}"

        rm -Rf "${tmp_dir_to_clean}" && e_success ""
    fi
}
trap trapCleanupTempDir EXIT SIGINT




# Files to work on
# The regex shown here must be suitable for regex find'ing:
# -iregex '.*\.(tif|tiff)'
declare SEARCH_FILES_IREGEX='.*\.(tif|tiff)'


# Where to search
declare SEARCH_DIRECTORY="."



# Default Gamma value
declare GAMMA_DEFAULT=1


# Result suffix
declare RESULT_SUFFIX=""
declare RESULT_SUFFIX_DEFAULT="-positive"

# Enable or disable RESULT_SUFFIX.
# 1: enabled (default)
# 0: disabled
declare APPEND_RESULT_SUFFIX=1



# --------------------------------------
# User settings:
# These settings can be set with command line arguments.
# --------------------------------------

declare -i normalize_colors=0
declare -i desaturate_colors=0
declare -i verbous_mode=0
declare -i jpeg_quality=0
declare -i resize_width=0
declare gamma="${GAMMA_DEFAULT}"
declare output_directory="${PWD}"
declare sigmoidal_contrast=0
declare flipflop_positive=""



# --------------------------------------
# Immutables
# --------------------------------------

# List of possible script arguments (getopts)
# Very much like getopts, expected short options should be appended to the
# string here. Any option followed by a ':' takes a required argument.
readonly OPTIONS_LIST="adnf:j:g:o:c:r:s:v"


# Internal Field Separator
### While this is recommended in "best-practice tutorials",
### this breaks calling dcraw and mogrify. Better let this commented-out.
readonly DEFAULT_IFS="${IFS}"
readonly SAFER_IFS=$'\n\t'
IFS="${SAFER_IFS}"


# Filesystem basics
readonly SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
readonly SCRIPT_NAME=$(basename "${0}")


# Consistent package location
readonly HOMEBREW_OPT_DIR=$(brew --prefix "$(basename "${0}")")
# Hack for development purposes
# HOMEBREW_OPT_DIR=$SCRIPT_DIR


# Prepare (but not create) a new temp directory
readonly WORK_TMPDIR=$(mktemp -du "${TMPDIR:-/tmp/}$(basename 0).XXXXXXXXXXXX")  || { e_error "Failed to create temp directory name."; }


# Formatting stuff
readonly DIVIDER_LINE="$(echo;)"
readonly C_WHITE='\033[1;37m'
readonly C_RED='\033[0;31m'
readonly C_GREEN='\033[0;32m'
readonly C_BLUE='\033[1;34m'
readonly C_GRAY='\033[1;30m'
readonly C_ORANGE=$(tput setaf 3)
readonly NC='\033[0m' # No Color


# Informative files
readonly LICENSE_FILE="LICENSE"
readonly USAGE_FILE="USAGE"
readonly CREDITS_FILE="CREDITS"

# --------------------------------------
# Output and formatting functions
# --------------------------------------

# Error message and error exit, redirecting stdout to stderr
function e_error {
    echo -e >&2 "${C_RED}Error: ${*}${NC}";
    exit 1;
}

function e_info {
  echo -e "${C_BLUE}${*}${NC}"
}

function e_warning {
  echo -e "${C_ORANGE}Warning: ${*}${NC}"
}

function e_success () {
  echo -e "${C_GREEN}âœ” ${*-}${NC}"
}

function e_result () {
  echo -e "${C_GREEN}${*}${NC}"
  #printf "${C_GREEN}%s${NC}" "${*}"
}

function e_verbous () {
  if [ $verbous_mode -gt 0 ]; then
    printf "${C_GRAY}%s${NC}" "${*}"
  fi
}


# --------------------------------------
# Create Todo file
# --------------------------------------
function createTodoFile {
  mkdir -p "${WORK_TMPDIR}"
  TODO_TXT="${WORK_TMPDIR}/positive-todo.txt"
  touch "${TODO_TXT}"
  echo "${TODO_TXT}"
}




# --------------------------------------
# Count lines in file
#
# Usage:
#   countLinesInFile <file>
# --------------------------------------
function countLinesInFile {
    wc -l < "${1}" | sed -e 's/^[ \t]*//'
}


# --------------------------------------
# catFirstFound
#
# Outputs given file in first matching location.
#
# Usage:
#   catFirstFound <file>
#
# --------------------------------------
function catFirstFound {
    local file_to_cat="${1}"
    local lookup=("${HOMEBREW_OPT_DIR}" "${SCRIPT_DIR}")

    for dir in "${lookup[@]}"; do
        if [ -f "${dir}/${file_to_cat}" ]; then
            cat "${dir}/${file_to_cat}"
        fi;
    done
    echo;
}


# --------------------------------------
# findFiles
#
# Usage:
#   findFiles iregex dir
# --------------------------------------
function findFiles {
    local regex=${1}
    local directory=${2}
    find -E "${directory}" -maxdepth 1 -type f -iregex "${regex}"
}


# --------------------------------------
# displayHelp
# --------------------------------------
function displayHelp {
    catFirstFound "${USAGE_FILE}"
    catFirstFound "${CREDITS_FILE}"
    exit 1;
}


# --------------------------------------
# _require_argument()
#
# Usage:
#   _require_argument <option> <argument>
#
# If <argument> is blank or another option, print an error message
#
# This function is stolen from William Melody's bash-boilerplate
# <https://github.com/alphabetum/bash-boilerplate>
# --------------------------------------

_require_argument() {
    # Set local variables from arguments.
    #
    # NOTE: 'local' is a non-POSIX bash feature and keeps the variable local to
    # the block of code, as defined by curly braces. It's easiest to just think
    # of them as local to a function.
    local _option="${1:-}"
    local _argument="${2:-}"

    if [[ -z "${_argument}" ]] || [[ "${_argument}" =~ ^- ]]
    then
        e_error "$(printf "Option requires a argument: %s\n" "${_option}")"
    fi
}



# ======================================
#  runBatchMode
# ======================================

function runBatchMode {

    # ---------------------------------------
    # Requirements
    # ---------------------------------------

    # Homebrew requirements
    require parallel

    # System commands
    require getconf

    # Stores all function parameters for use with GNU Parallel
    local -r FUNC_ARGUMENTS=("${@}")


    # For statistic purposes
    local START_TIME=$SECONDS
    local -r CPUs=$(getconf _NPROCESSORS_ONLN)


    # ---------------------------------------
    # Find stuff to work on
    # ---------------------------------------
    local -r TODO_TXT=$(createTodoFile)
    findFiles "${SEARCH_FILES_IREGEX}" "${SEARCH_DIRECTORY}" > "${TODO_TXT}"
    local -r number_of_images=$(countLinesInFile "${TODO_TXT}")


    # ---------------------------------------
    # Start parallel processing
    # ---------------------------------------

    if [ $verbous_mode -gt 0 ]; then
        printf "Process these %s images, using GNU Parallel:\n" "${number_of_images}"
        printf "${C_GRAY}%s\n${NC}" "$(column "${TODO_TXT}")"
    fi

    # parallel --dry-run -a "${TODO_TXT}" "$0" "${FUNC_ARGUMENTS[@]}" "{}"
    parallel -a "${TODO_TXT}" "$0" "${FUNC_ARGUMENTS[@]}" "{}"


    # ---------------------------------------
    # Outro
    # ---------------------------------------

    # Some stats
    local -r ELAPSED_TIME=$((SECONDS - START_TIME))

    printf "\nSome stats:\n"
    printf "CPUs used:     %s\n"          "${CPUs}"
    printf "Elapsed time:  %smin %ssec\n" $((ELAPSED_TIME/60)) $((ELAPSED_TIME%60))
    printf "Done:          %s images\n"   "${number_of_images}"
}


# ======================================
#  applyMogrify
#
#  Usage:
#    applyMogrify <input_file> <mogrify_options> <output_tiff> <output_jpeg>
# ======================================

function applyMogrify {
    # Homebrew dependencies
    require mogrify

    # Parameters
    local INPUT_TIFF="${1}"; shift
    local mogrify_options="${1}"; shift
    local output_tiff="${1}"; shift
    local output_jpeg="${1}"; shift


    # ---------------------------------------
    # Just in case $INPUT_TIFF is NOT a regular file
    # ---------------------------------------
    if [ ! -f "${INPUT_TIFF}" ]; then
        e_error "$(printf 'applyMogrify: %s is not a regular file.' "${INPUT_TIFF}")"
    fi


    # ---------------------------------------
    # Create workfile to work on with mogrify
    # ---------------------------------------
    cp "${INPUT_TIFF}" "${output_tiff}"


    # ---------------------------------------
    # Call mogrify
    # ---------------------------------------

    e_verbous "$(printf "\nmogrify %s " "${mogrify_options}")"

    IFS="${DEFAULT_IFS}"
    mogrify ${mogrify_options} "${output_tiff}"
    IFS="${SAFER_IFS}"
}


# ======================================
#  convertToJpeg
#
#  Usage:
#    convertToJpeg <input_file> <convert_options> <output_file.jpg>
# ======================================
function convertToJpeg {

    # --------------------------------------
    # Requirements
    # --------------------------------------

    # Homebrew dependencies
    require convert

    # Parameters
    local output_tiff="${1}"; shift
    local convert_options="${1}"; shift
    local output_jpeg="${1}"; shift

    # ---------------------------------------
    # Just in case $output_tiff is NOT a regular file
    # ---------------------------------------
    if [ ! -f "${output_tiff}" ]; then
        e_error "$(printf '%s is not a regular file.' "${output_tiff}")"
    fi

    # ---------------------------------------
    # Call convert
    # ---------------------------------------

    e_verbous "$(printf "\nconvert %s " "${convert_options}")"

    IFS="${DEFAULT_IFS}"
    convert "${output_tiff}" ${convert_options} "${output_jpeg}"
    IFS="${SAFER_IFS}"
}

# ======================================
#  processNegatives
# ======================================

function processNegatives {

    # --------------------------------------
    # Requirements
    # --------------------------------------

    # Homebrew dependencies
    require color-profiles

    # System commands
    require awk

    # Files to work on.
    local -r INPUT_FILES=("${@}")


    # --------------------------------------
    # Output contrast settings
    # --------------------------------------


    # Percentage of histogram edges to be truncated.
    # The default is that 0.1 percent of the histogram entries are ignored.
    # Set to 0 to use the complete histogram.
    declare HISTOGRAM_THRESHOLD=0.1


    # --------------------------------------
    # Default ICC profile.
    # See DCRAW_COLORSPACE_VALUE
    # --------------------------------------
    local ICC_PROFILE_PATH
    ICC_PROFILE_PATH=$(color-profiles srgb-linear )

    # ---------------------------------------
    #  Build mogrify's options string.
    # ---------------------------------------
    local mogrify_options=""
    mogrify_options="-negate"


    # Flip or flop the image, if required.
    if [ ! -z "${flipflop_positive}" ]; then
        if [ "${flipflop_positive}" = "flipflop" ]; then
            mogrify_options+=" -flip -flop"
        else
            mogrify_options+=" -${flipflop_positive}"
        fi
    fi

    # Resize image on its larger side
    if [ $resize_width -gt 0 ]; then
        mogrify_options+=" -resize ${resize_width}x${resize_width}>"
    fi



    #  Normalize colors, if required:
    #  Transform image to span the full range of color values
    #  See http://www.graphicsmagick.org/GraphicsMagick.html#details-normalize
    if [ $normalize_colors -eq 1 ]; then
      mogrify_options+=" -set histogram-threshold ${HISTOGRAM_THRESHOLD} -normalize";
    fi


    #  Apply Sigmoidal Contrast Curve.
    #  Increases the contrast without saturating highlights or shadows.
    if [ $sigmoidal_contrast -gt 0 ]; then
      mogrify_options="${mogrify_options} -sigmoidal-contrast ${sigmoidal_contrast},50%";

      # Append to suffix
      RESULT_SUFFIX="${RESULT_SUFFIX}-s${sigmoidal_contrast}"
    fi



    #  Apply Gamma, if required.
    #  Having colors normalized with -n parameter is heavily recommended.
    #
    #  Quoted from IM docs:
    #  Setting gamma to "auto" calculates the mean values of an image, then applies a calculated -gamma adjustment
    #  so that is the mean color exists in the image it will get a have a value of 50%.
    if [ "${gamma}" = "auto" ]; then
      mogrify_options="${mogrify_options} -auto-gamma -auto-level"
      RESULT_SUFFIX="${RESULT_SUFFIX}-autogamma"
    else
      if [ "${gamma}" != "${GAMMA_DEFAULT}" ]; then
        GAMMA_VALUE=$(echo "1 ${gamma}" | LC_NUMERIC=en_US.utf-8 awk --use-lc-numeric '{printf "%0.2f", $1 / $2}')
        mogrify_options="${mogrify_options} -gamma ${GAMMA_VALUE}";

        # Append to suffix
        RESULT_SUFFIX="${RESULT_SUFFIX}-g${gamma/./}"
      fi
    fi


    #  Desaturate colors, if required:
    #  Equivalent to ImageMagick's "-grayscale rec709luma"
    #  See http://www.graphicsmagick.org/GraphicsMagick.html#details-modulate
    if [ $desaturate_colors -eq 1 ]; then
        # Linear Gamma 1.0 Gray profile
        ICC_PROFILE_PATH=$(color-profiles gray-linear )
        mogrify_options+=" -modulate 100,0 -colorspace Gray"
    fi
    mogrify_options+=" -profile ${ICC_PROFILE_PATH}"


    #  Compress image
    mogrify_options+=" -compress Zip "


    # ---------------------------------------
    # Build convert options string
    # ---------------------------------------
    local convert_options=""
    if [ $jpeg_quality -gt 0 ]; then
        # JPG quality
        convert_options+=" -quality ${jpeg_quality}"

        # Convert to sRGB
        local srgb_v4_appearance_profile
        srgb_v4_appearance_profile=$(color-profiles srgb-v4 )
        convert_options+=" -colorspace sRGB -profile ${srgb_v4_appearance_profile}"
    fi


    # ---------------------------------------
    # Create output directory if needed.
    # ---------------------------------------
    if [ "${output_directory}" != "${PWD}" ]; then
        mkdir -p "${output_directory}";
    fi


    # ---------------------------------------
    # Reset result suffix,
    # if disabled somewhere above.
    # Set to default value, if target directory
    # is identical with $PWD
    # ---------------------------------------

    # Reset if generally disabled

    if [ $APPEND_RESULT_SUFFIX -eq 0 ]; then
      RESULT_SUFFIX=""
    fi;


    # When target directory is $PWD,
    # duplicate files must be avoided
    if [ "${output_directory}" = "${PWD}" ]; then

      # If result suffix is empty, assume default value.
      if [ -z "${RESULT_SUFFIX}" ]; then
        RESULT_SUFFIX="${RESULT_SUFFIX_DEFAULT}"
      fi;
    fi;



    # =============================================================
    #  Process the file given
    # =============================================================

    for INPUT_TIFF in "${INPUT_FILES[@]}"; do



        # ---------------------------------------
        # Plausibility check
        # ---------------------------------------
        if [ ! -f "${INPUT_TIFF}" ]; then
            e_warning "$(printf 'processNegatives: %s is not a regular file.' "${INPUT_TIFF}")"
            continue;
        fi


        # ---------------------------------------
        # Filename magic
        # ---------------------------------------
        local input_file_extension="${INPUT_TIFF##*.}";
        local input_file_basename="${INPUT_TIFF%.$input_file_extension}"
        input_file_basename="${input_file_basename##*/}" # remove trailing slash

        local output_tiff="${output_directory}/${input_file_basename}${RESULT_SUFFIX}.${input_file_extension}"
        local output_jpeg="${output_directory}/${input_file_basename}${RESULT_SUFFIX}.jpg"

        e_info "$(printf "\n%s\n" "${INPUT_TIFF}")"

        # ---------------------------------------
        #  Do 'real' inversion and image editing
        # ---------------------------------------
        e_verbous "$(echo;)"
        printf "Create positive image: "
        (applyMogrify "${INPUT_TIFF}" "${mogrify_options}" "${output_tiff}" "${output_jpeg}") || {
            e_warning "$(printf "Could not create positive: %s" "${INPUT_TIFF}")"
            continue
            #exit 1
        }
        e_success ""


        # ---------------------------------------
        # Do nothing else if JPEG conversion not required
        # ---------------------------------------
        if [ $jpeg_quality -eq 0 ]; then
            e_result "$(printf "Result: %s" "${output_tiff}")"
            continue
            #exit 0
        fi

        # So JPEG conversion is required:
        printf "Convert to JPG: "
        (convertToJpeg "${output_tiff}" "${convert_options}" "${output_jpeg}") \
        && {
            e_success ""
            rm "${output_tiff}" || e_warning "$(printf 'Can not remove file %s' "${output_tiff}")"
            e_result "$(printf "Result: %s" "${output_jpeg}")"
        } || {
            if [ -f "${output_tiff}" ]; then
                e_warning "$(printf "Did not convert to JPEG, result still:\n%s" "${output_tiff}")"
            fi
        }
    done
}


# ======================================
#  The main program
# ======================================

function main {

    # ---------------------------------------
    # Print short help if no arguments
    # ---------------------------------------
    if [ "$#" -eq 0 ]; then
        printf "Run '%s --help' or with '-h' to get a list of all options.\n" "${SCRIPT_NAME}"
        exit 1
    fi


    # ---------------------------------------
    # Normalize options
    #
    # This section is stolen from William Melody's bash-boilerplate
    # <https://github.com/alphabetum/bash-boilerplate>
    # ---------------------------------------

    # iterate over options, breaking -ab into -a -b and --foo=bar into --foo bar
    # also turns -- into --endopts to avoid issues with things like '-o-', the '-'
    # should not indicate the end of options, but be an invalid option (or the
    # argument to the option, such as wget -qO-)
    unset options
    # while the number of arguments is greater than 0
    while ((${#}))
    do
      case ${1} in
        # if option is of type -ab
        -[!-]?*)
          # loop over each character starting with the second
          for ((i=1; i<${#1}; i++))
          do
            # extract 1 character from position 'i'
            c=${1:i:1}
            # add current char to options
            options+=("-${c}")

            # if option takes a required argument, and it's not the last char
            # make the rest of the string its argument
            if [[ ${OPTIONS_LIST} = *"${c}:"* && ${1:i+1} ]]
            then
              options+=("${1:i+1}")
              break
            fi
          done
          ;;
        # if option is of type --foo=bar, split on first '='
        --?*=*)
          options+=("${1%%=*}" "${1#*=}")
          ;;
        # end of options, stop breaking them up
        --)
          options+=(--endopts)
          shift
          options+=("${@}")
          break
          ;;
        # otherwise, nothing special
        *)
          options+=("${1}")
          ;;
      esac

      shift
    done
    # set new positional parameters to altered options. Set default to blank.
    set -- "${options[@]:-}"
    unset options


    # ---------------------------------------
    # Parse Options
    # ---------------------------------------

    # Initialize program option variables.
    declare -i use_batch_mode=0
    declare -i print_help=0

    # Keeps all CLI arguments without -a or --all.
    # Used by runBatchMode when letting GNU Parallel
    # call this very script.
    local recursion_arguments=""

    # Keeps anything that does not look like an option.
    local -a image_parameters_array


    # getopts and getopts have inconsistent behavior, so using a simple home-brewed
    # while loop. This isn't perfectly compliant with POSIX, but it's close enough
    # and this appears to be a widely used approach.
    #
    # More info:
    #   http://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html
    #   http://stackoverflow.com/a/14203146
    #   http://stackoverflow.com/a/7948533
    #
    # This section is stolen from William Melody's bash-boilerplate
    # <https://github.com/alphabetum/bash-boilerplate>
    while [ ${#} -gt 0 ]
    do
        __option="${1:-}"
        __maybe_param="${2:-}"

        case "${__option}" in
            -h|--help)
                print_help=1
                ;;
            -a|--all)
                use_batch_mode=1
                ;;
            -d|--desaturate)
                desaturate_colors=1
                recursion_arguments+=" ${__option}"
                ;;
            -n|--normalize)
                normalize_colors=1
                recursion_arguments+=" ${__option}"
                ;;
            -v|--verbous)
                verbous_mode=1
                recursion_arguments+=" ${__option}"
                ;;
            -f|--flipflop)
                _require_argument "${__option}" "${__maybe_param}"
                flipflop_positive="${__maybe_param}"
                recursion_arguments+=" ${__option} ${__maybe_param}"
                shift
                ;;
            -g|--gamma)
                _require_argument "${__option}" "${__maybe_param}"
                gamma="${__maybe_param}"
                recursion_arguments+=" ${__option} ${__maybe_param}"
                shift
                ;;
            -j|--jpg)
                _require_argument "${__option}" "${__maybe_param}"
                jpeg_quality="${__maybe_param}"
                recursion_arguments+=" ${__option} ${__maybe_param}"
                shift
                ;;
            -o|--output)
                _require_argument "${__option}" "${__maybe_param}"
                output_directory="${__maybe_param}"
                recursion_arguments+=" ${__option} ${__maybe_param}"
                shift
                ;;
            -r|--resize)
                _require_argument "${__option}" "${__maybe_param}"
                resize_width=${__maybe_param}
                recursion_arguments+=" ${__option} ${__maybe_param}"
                shift
                ;;
            -s|--sigmoidal)
                _require_argument "${__option}" "${__maybe_param}"
                sigmoidal_contrast=${__maybe_param}
                recursion_arguments+=" ${__option} ${__maybe_param}"
                shift
                ;;
            --endopts)
                # Terminate option parsing.
                break
                ;;
            -*)
                # Assume option because of leading "-"
                e_error "$(printf "Unexpected option '%s'\n" "${__option}")"
                ;;
            *)
                # "Anything else must be an image parameter"
                # This is a WORKAROUND, as without this "*)" block any given image parameters
                # after the arguments seem to get lost (i.e., stuck in last $__option checked).
                image_parameters_array+=(${__option})
                ;;
        esac
        shift

    done



    # ---------------------------------------
    # Kind of main controller:
    # ---------------------------------------

    if [ $print_help -gt 0 ]; then
        displayHelp
    fi;

    if [ $use_batch_mode -gt 0 ]; then
        runBatchMode ${recursion_arguments}
    else

        processNegatives ${image_parameters_array[@]}

    fi;


    echo;

}

main "${@}"
